정수를 저장하는 스택을 구현한 다음, 입력으로 주어지는 명령을 처리하는 프로그램을 작성하시오.

명령은 총 다섯 가지이다.

push X: 정수 X를 스택에 넣는 연산이다.
pop: 스택에서 가장 위에 있는 정수를 빼고, 그 수를 출력한다. 만약 스택에 들어있는 정수가 없는 경우에는 -1을 출력한다.
size: 스택에 들어있는 정수의 개수를 출력한다.
empty: 스택이 비어있으면 1, 아니면 0을 출력한다.
top: 스택의 가장 위에 있는 정수를 출력한다. 만약 스택에 들어있는 정수가 없는 경우에는 -1을 출력한다.

입력:
첫째 줄에 주어지는 명령의 수 N (1 ≤ N ≤ 10,000)이 주어진다. 둘째 줄부터 N개의 줄에는 명령이 하나씩 주어진다.
주어지는 정수는 1보다 크거나 같고, 100,000보다 작거나 같다. 문제에 나와있지 않은 명령이 주어지는 경우는 없다.

#include <iostream>
using namespace std;

struct StackNode {
    StackNode* next = nullptr;
    int data;
};

void push(StackNode* head, int input) {
    if (head == nullptr) {
        head = new StackNode;
        head->data = input;
    }
    else {
        for (StackNode* k = head; k != nullptr; k = k->next) {
            if (k->next == nullptr) {
                k->next = new StackNode;
                k->next->data = input;
            }
        }
    }
}

void pop(StackNode* head) {
    if (head == nullptr)
        cout << -1 << '\n';
    else if (head->next == nullptr) {
        cout << head->data << '\n';
        delete head;
        head = nullptr;
    }
    else {
        for (StackNode* k = head; k != nullptr; k = k->next) {
            if (k->next->next == nullptr) {
                cout << k->next->data << '\n';
                delete k->next;
                k->next = nullptr;
            }
        }
    }
}

void size(StackNode* head) {
    int size = 0;
    for (StackNode* k = head; k != nullptr; k = k->next, ++size)
    cout << size << '\n';
}

void empty(StackNode* head) {
    if (head == nullptr) cout << 1 << '\n';
    else cout << 0 << '\n';
}

void top(StackNode* head) {
    if (head == nullptr)
        cout << -1 << '\n';
    else if (head->next == nullptr) {
        cout << head->data << '\n';
    }
    else {
        for (StackNode* k = head; k != nullptr; k = k->next) {
            if (k->next->next == nullptr) {
                cout << k->next->data << '\n';
                break;
            }
        }
    }
}

int main() {
    int repeat_numb;
    StackNode* head = nullptr;
    string current_order;
    cin >> repeat_numb;
    for (int i = 0; i < repeat_numb; ++i) {
        cin >> current_order;
        if (current_order == "push") {
            int input;
            cin >> input;
            push(head, input);
        }
        else if (current_order == "pop")
            pop(head);
        else if (current_order == "size")
            size(head);
        else if (current_order == "empty")
            empty(head);
        else if (current_order == "top")
            top(head);
    }
    return 0;
}